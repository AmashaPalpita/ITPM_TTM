/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sessions;

import Form.DBClass;
import Session.Add_Session;
import Session.Manage_Session_View;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import net.proteanit.sql.DbUtils;

/**
 *
 * @author Amasha
 */
public class Manage_Session extends javax.swing.JFrame {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    int q,i,id,deleteItem,update;  
    /**
     * Creates new form Manage_Session
     */
    public Manage_Session() {
        initComponents();
        upDateDB();
    }

    Add_Session addSession = new Add_Session();
    
    public void upDateDB() {
        
        try{
            con = DBClass.getConnection();
            pst = con.prepareStatement("select * from sessions");
            
            rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            
            q = stData.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)TableSession.getModel();
            RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                
                for (i = 1;i <= q;i++){
                    columnData.add(rs.getString("idsessions"));
                    columnData.add(rs.getString("lecturerName1"));
                    columnData.add(rs.getString("lecturerName2"));
                    columnData.add(rs.getString("subjectName"));
                    columnData.add(rs.getString("subjectCode"));
                    columnData.add(rs.getString("groupID"));
                    columnData.add(rs.getString("tag"));
                    columnData.add(rs.getString("noOfStudents"));
                    columnData.add(rs.getString("duration"));
                } 
                RecordTable.addRow(columnData);
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSession = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        ViewBtn = new javax.swing.JButton();
        AddSession = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        refreshButton.setBackground(new java.awt.Color(255, 204, 0));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(255, 0, 0));
        updateButton.setText("Update");
        updateButton.setToolTipText("Select the row need to update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(102, 255, 0));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 0, 255));
        jButton4.setText("Add Lecture");

        jButton5.setBackground(new java.awt.Color(153, 0, 255));
        jButton5.setText("Manage Lecturer");

        jButton6.setBackground(new java.awt.Color(153, 0, 255));
        jButton6.setText("Add Subject");

        TableSession.setBackground(new java.awt.Color(204, 153, 255));
        TableSession.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TableSession.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Lecturer 1", "Lectuere 2", "Subject Name", "Subject Code", "Group ID", "Tag", "No of Students", "Duration(Hours)"
            }
        ));
        TableSession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSessionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableSession);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Manage Subjects");

        ViewBtn.setBackground(new java.awt.Color(255, 204, 0));
        ViewBtn.setText("View");
        ViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewBtnActionPerformed(evt);
            }
        });

        AddSession.setBackground(new java.awt.Color(255, 204, 0));
        AddSession.setText("Add Session");
        AddSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSessionActionPerformed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(102, 255, 0));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(ViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(AddSession, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddSession, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try{
            con = DBClass.getConnection();
            pst = con.prepareStatement("select * from sessions");
            
            rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            
            q = stData.getColumnCount();
            
            DefaultTableModel RecordTable = (DefaultTableModel)TableSession.getModel();
            RecordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                
                for (i = 1;i <= q;i++){
                    columnData.add(rs.getString("idsessions"));
                    columnData.add(rs.getString("lecturerName1"));
                    columnData.add(rs.getString("lecturerName2"));
                    columnData.add(rs.getString("subjectName"));
                    columnData.add(rs.getString("subjectCode"));
                    columnData.add(rs.getString("groupID"));
                    columnData.add(rs.getString("tag"));
                    columnData.add(rs.getString("noOfStudents"));
                    columnData.add(rs.getString("duration"));
                } 
                RecordTable.addRow(columnData);
            }
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(null,ex);
        }

    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
    DefaultTableModel RecordTable = (DefaultTableModel)TableSession.getModel();
        int SelectedRows = TableSession.getSelectedRow();
        
        try {
            id = Integer.parseInt(RecordTable.getValueAt(SelectedRows, 0).toString());
            
            deleteItem = JOptionPane.showConfirmDialog(null, "Do you want to delete?", "Warning",JOptionPane.YES_NO_OPTION);
            
            if (deleteItem == JOptionPane.YES_OPTION) {
                con = DBClass.getConnection();
                pst = con.prepareStatement("delete from sessions where idsessions = ?");
                
                pst.setInt(1, id);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Deleted Successfully");
               
               
            }
        } catch (SQLException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void TableSessionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSessionMouseClicked
        /*int index = TableSession.getSelectedRow();
        TableModel model = TableSession.getModel();
       
        String id = model.getValueAt(index, 0).toString();
        String lecName1 = model.getValueAt(index, 1).toString();
        String lecName2 = model.getValueAt(index, 2).toString();
        String subName = model.getValueAt(index, 3).toString();
        String subCode = model.getValueAt(index, 4).toString();
        String groupID = model.getValueAt(index, 5).toString();
        String tag = model.getValueAt(index, 6).toString();
        String noOfStudents = model.getValueAt(index, 7).toString();
        String duration = model.getValueAt(index, 8).toString();
        
        addSession.setVisible(true);
        addSession.pack();
        addSession.setLocationRelativeTo(null);
        addSession.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
         try {
            con = DBClass.getConnection();

            //Lectuere Name
            Statement stmt = con.createStatement();
            String query = "select lecturerName from lecturer";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.lecturerName.addItem(rs.getString("lecturerName"));
            }
            
            //Subject Name
            stmt = con.createStatement();
            query = "select subjectName from subjects";
            rs = stmt.executeQuery(query);
            
            while (rs.next()) {
                addSession.subjectName.addItem(rs.getString("subjectName"));
            }
            
            //SubjectCode
            stmt = con.createStatement();
            query = "select subjectCode from subjects";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.subjectCode.addItem(rs.getString("subjectCode"));
            }
            
            //Group ID
            stmt = con.createStatement();
            query = "select grup_id from student_group";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.groupID.addItem(rs.getString("grup_id"));
            }
            
            //Tag
            stmt = con.createStatement();
            query = "select tag_name from tags";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.tags.addItem(rs.getString("tag_name"));
            }
             
        } catch(Exception e ) {
            System.out.println(e);
        }
         
        addSession.lecturerSelectedD.setSelectedItem(lecName1);
        addSession.lecturerSelectedD.setSelectedItem(lecName2);
        addSession.subjectName.setSelectedItem(subName);
        addSession.subjectCode.setSelectedItem(subCode);
        addSession.groupID.setSelectedItem(groupID);
        addSession.tags.setSelectedItem(tag);
        addSession.niOfStudents.setText(noOfStudents);
        addSession.duration.setText(duration);*/
    }//GEN-LAST:event_TableSessionMouseClicked

    private void ViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewBtnActionPerformed
        Manage_Session_View msv = new Manage_Session_View();
        msv.setVisible(true);
        msv.pack();
        msv.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_ViewBtnActionPerformed

    private void AddSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSessionActionPerformed
        Add_Session as = new Add_Session();
        as.setVisible(true);
        as.pack();
        as.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_AddSessionActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchBtn = search.getText();
        upDateDB();
        
        try {
            con = DBClass.getConnection();
           
                if (searchBtn.matches("^[0-9]+$")){//noOfStudents
                String query = "select * from sessions where noOfStudents="+searchBtn+" or duration="+searchBtn;
                pst = con.prepareStatement(query);
                rs = pst.executeQuery();
                TableSession.setModel(DbUtils.resultSetToTableModel(rs));
            } else {
                String query = "select * from sessions where lecturerName1 like '%"+searchBtn+"%' or lecturerName2 like '%"+searchBtn+"%' or subjectName like '%"+searchBtn+"%' or subjectCode like '%"+searchBtn+"%' or groupID like '%"+searchBtn+"%' or tag like '%"+searchBtn+"%'";
                pst = con.prepareStatement(query);
                rs = pst.executeQuery();
                TableSession.setModel(DbUtils.resultSetToTableModel(rs));     
                        
            }
           
        } catch (SQLException e) {
            System.err.println(e);
           
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
       /*DefaultTableModel model = (DefaultTableModel)TableSession.getModel();
       int SelectedRows = TableSession.getSelectedRow();
       
        String id = model.getValueAt(index, 0).toString();
        String lecName1 = model.getValueAt(index, 1).toString();
        String lecName2 = model.getValueAt(index, 2).toString();
        String subName = model.getValueAt(index, 3).toString();
        String subCode = model.getValueAt(index, 4).toString();
        String groupID = model.getValueAt(index, 5).toString();
        String tag = model.getValueAt(index, 6).toString();
        String noOfStudents = model.getValueAt(index, 7).toString();
        String duration = model.getValueAt(index, 8).toString();
        
        addSession.setVisible(true);
        addSession.pack();
        addSession.setLocationRelativeTo(null);
        addSession.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
         try {
            con = DBClass.getConnection();

            //Lectuere Name
            Statement stmt = con.createStatement();
            String query = "select lecturerName from lecturer";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.lecturerName.addItem(rs.getString("lecturerName"));
            }
            
            //Subject Name
            stmt = con.createStatement();
            query = "select subjectName from subjects";
            rs = stmt.executeQuery(query);
            
            while (rs.next()) {
                addSession.subjectName.addItem(rs.getString("subjectName"));
            }
            
            //SubjectCode
            stmt = con.createStatement();
            query = "select subjectCode from subjects";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.subjectCode.addItem(rs.getString("subjectCode"));
            }
            
            //Group ID
            stmt = con.createStatement();
            query = "select grup_id from student_group";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.groupID.addItem(rs.getString("grup_id"));
            }
            
            //Tag
            stmt = con.createStatement();
            query = "select tag_name from tags";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                addSession.tags.addItem(rs.getString("tag_name"));
            }
             
        } catch(Exception e ) {
            System.out.println(e);
        }
         
        addSession.lecturerSelectedD.setSelectedItem(lecName1);
        addSession.lecturerSelectedD.setSelectedItem(lecName2);
        addSession.subjectName.setSelectedItem(subName);
        addSession.subjectCode.setSelectedItem(subCode);
        addSession.groupID.setSelectedItem(groupID);
        addSession.tags.setSelectedItem(tag);
        addSession.niOfStudents.setText(noOfStudents);
        addSession.duration.setText(duration);*/
        
       
       DefaultTableModel model = (DefaultTableModel)TableSession.getModel();
       int SelectedRows = TableSession.getSelectedRow();

        id = Integer.parseInt(model.getValueAt(SelectedRows, 0).toString());
        String lecName1 = model.getValueAt(SelectedRows, 1).toString();
        String lecName2 = model.getValueAt(SelectedRows, 2).toString();
        String subName = model.getValueAt(SelectedRows, 3).toString();
        String subCode = model.getValueAt(SelectedRows, 4).toString();
        String groupID = model.getValueAt(SelectedRows, 5).toString();
        String tag = model.getValueAt(SelectedRows, 6).toString();
        String noOfStudents = model.getValueAt(SelectedRows, 7).toString();
        String duration = model.getValueAt(SelectedRows, 8).toString();
        
        //M1
        /*String newID = JOptionPane.showInputDialog(null, "Enter the New ID",id );
        String newlec1= JOptionPane.showInputDialog(null, "Enter the New Lecturer 1 Name", lecName1 );
        String newlec2 = JOptionPane.showInputDialog(null, "Enter the New Lecturer 2 Name", lecName2 );
        String newSubName = JOptionPane.showInputDialog(null, "Enter the New Subject Name", subName );
        String newSubCode = JOptionPane.showInputDialog(null, "Enter the New Subject Code", subCode );
        String newGrpID = JOptionPane.showInputDialog(null, "Enter the New Group ID", groupID );
        String newTag = JOptionPane.showInputDialog(null, "Enter the New Tag", tag );
        String newNoOfStudents = JOptionPane.showInputDialog(null, "Enter the New No of Students", noOfStudents );
        String newduration = JOptionPane.showInputDialog(null, "Enter the New duration", duration );*/
        

             
        //M2
        /*JTextField lec1 = new JTextField(lecName1);
        JTextField lec2 = new JTextField(lecName2);
        JTextField subN = new JTextField(subName);
        JTextField subC = new JTextField(subCode);
        JTextField gID = new JTextField(groupID);
        JTextField tags = new JTextField(tag);
        JTextField std = new JTextField(noOfStudents);
        JTextField dur = new JTextField(duration);*/
        
        JComboBox lec1 = new JComboBox();
        JComboBox lec2 = new JComboBox();
        JComboBox subN = new JComboBox();
        JComboBox subC = new JComboBox();
        JComboBox gID = new JComboBox();
        JComboBox tags = new JComboBox();
        JTextField std = new JTextField(noOfStudents);
        JTextField dur = new JTextField(duration);
        
                    try {
            con = DBClass.getConnection();

            //Lectuere Name
            Statement stmt = con.createStatement();
            String query = "select lecturerName from lecturer";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
               lec1.addItem(rs.getString("lecturerName"));
               lec2.addItem(rs.getString("lecturerName"));
            }
            
            //Subject Name
            stmt = con.createStatement();
            query = "select subjectName from subjects";
            rs = stmt.executeQuery(query);
            
            while (rs.next()) {
                subN.addItem(rs.getString("subjectName"));
            }
            
            //SubjectCode
            stmt = con.createStatement();
            query = "select subjectCode from subjects";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                subC.addItem(rs.getString("subjectCode"));
            }
            
            //Group ID
            stmt = con.createStatement();
            query = "select grup_id from student_group";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                gID.addItem(rs.getString("grup_id"));
            }
            
            //Tag
            stmt = con.createStatement();
            query = "select tag_name from tags";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                tags.addItem(rs.getString("tag_name"));
            }
             
        } catch(Exception e ) {
            System.out.println(e);
        }
   
        lec1.setSelectedItem(lecName1);
        lec2.setSelectedItem(lecName2);
        subN.setSelectedItem(subName);
        subC.setSelectedItem(subCode);
        gID.setSelectedItem(groupID);
        tags.setSelectedItem(tag);
        std.setText(noOfStudents);
        dur.setText(duration);
        
        Object [] fields = {
            "Lecturer Name 1", lec1,
            "Lecturer Name 2", lec2,
            "Subject Name", subN,
            "Subject Code", subC,
            "Grouop ID (Y.S.P.GN)", gID,
            "Tag", tags,
            "Number if Students", std,
            "Duration", dur
        };
        
        int option = JOptionPane.showConfirmDialog(this, fields, "Update Session", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        
        if (option == JOptionPane.OK_OPTION) {
            try {
            con = DBClass.getConnection();
            pst = con.prepareStatement("update sessions set lecturerName1 = ?, lecturerName2 = ?, subjectName = ?, subjectCode = ?, groupID = ?, tag = ?, noOfStudents = ?, duration = ? where idSessions = ?");
                         
            pst.setString(1, (String) lec1.getSelectedItem());
            pst.setString(2, (String) lec2.getSelectedItem());
            pst.setString(3, (String) subN.getSelectedItem());
            pst.setString(4, (String) subC.getSelectedItem());
            pst.setString(5, (String) gID.getSelectedItem());
            pst.setString(6, (String) tags.getSelectedItem());
            pst.setString(7, std.getText());
            pst.setString(8, dur.getText());
            pst.setInt(9, id);
        
        
           pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            //upDateDB();
            } catch (SQLException e) {
                Logger.getLogger(Manage_Session.class.getName()).log(Level.SEVERE, null, e);
            }

        }

        //model.setValueAt(newID, SelectedRows, 0);
       // model.setValueAt(newduration, SelectedRows, 8);
  
        //M1
       // try {
            
            //con = DBClass.getConnection();
           // pst = con.prepareStatement("update sessions set lecturerName1 = ?, lecturerName2 = ?, subjectName = ?, subjectCode = ?, groupID = ?, tag = ?, noOfStudents = ?, duration = ? where idSessions = ?");
            
           // pst.setString(1, s1.getTest);
                     
           /* pst.setString(1, newlec1);
            pst.setString(2, newlec2);
            pst.setString(3, subName);
            pst.setString(4, subCode);
            pst.setString(5, groupID);
            pst.setString(6, tag);
            pst.setString(7, newNoOfStudents);
            pst.setString(8, newduration);
            pst.setInt(9, id);*/
        
        
           // pst.executeUpdate();
        //JOptionPane.showMessageDialog(this, "Updated Successfully");
        //upDateDB();
        //} catch (SQLException e) {
        // Logger.getLogger(Manage_Session.class.getName()).log(Level.SEVERE, null, e);
        //}
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manage_Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manage_Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manage_Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manage_Session.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Manage_Session().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSession;
    private javax.swing.JTable TableSession;
    private javax.swing.JButton ViewBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField search;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
